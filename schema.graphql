enum LockType {
  DEPOSIT_FOR,
  CREATE_LOCK,
  INCREASE_LOCK_AMOUNT,
  INCREASE_UNLOCK_TIME,
  WITHDRAW
}

enum VoteType {
  OWNERSHIP,
  PARAMETER
}

type Platform @entity {
  id: ID!
  totalVeCrv: BigInt!
  totalCrvLocked: BigInt!
  crvSupply: BigInt!
  poolCount: BigInt!
  pools: [Pool!]! @derivedFrom(field: "platform")
  gauges: [Gauge!] @derivedFrom(field: "platform")
  gaugeIds: [String!]!
  snapshotTimes: [SnapshotTime!] @derivedFrom(field: "platform")
}

type PowerSnapshot @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  # total supply of veCRV
  totalVeCrv: BigInt!
  # total amount of CRV locked in contract
  totalCrvLocked: BigInt!
  # total amount of CRV minted
  crvSupply: BigInt!
}

type User @entity {
  id: ID!
  balance: UserBalance! @derivedFrom(field: "user")
  locks: [Lock!]! @derivedFrom(field: "user")
}

type UserBalance @entity {
  id: ID!
  startTx: Bytes!
  user: User!
  crvLocked: BigInt!
  lockStart: BigInt!
  unlockTime: BigInt!
}

type Lock @entity {
  id: ID!
  user: User!
  tx: Bytes!
  value: BigInt!
  lockStart: BigInt!
  unlockTime: BigInt!
  previousUnlockTime: BigInt!
  totalLocked: BigInt!
  previousTotalLocked: BigInt!
  type: LockType!
  timestamp: BigInt!
}

### Vote tracking

type Proposal @entity {
  id: ID!
  tx: Bytes!
  voteId: BigInt!
  voteType: VoteType!
  creator: Bytes!
  startDate: BigInt!
  snapshotBlock: BigInt!
  ipfsMetadata: String!
  metadata: String!
  minBalance: BigInt!
  minTime: BigInt!
  totalSupply: BigInt!
  creatorVotingPower: BigInt!
  votesFor: BigInt!
  votesAgainst: BigInt!
  votes: [Vote!]! @derivedFrom(field: "proposal")
  voteCount: BigInt!
  supportRequired: BigInt!
  minAcceptQuorum: BigInt!
  executed: Boolean!
  execution: Execution! @derivedFrom(field: "proposal")
  script: Bytes!
}

type Vote @entity {
  id: ID!
  tx: Bytes!
  voteId: BigInt!
  proposal: Proposal!
  voter: Bytes!
  supports: Boolean!
  stake: BigInt!
}

type Execution @entity {
  id: ID!
  tx: Bytes!
  voteId: BigInt!
  proposal: Proposal!
}

### Gauges tracking

type GaugeLiquidity @entity {
  id: ID!
  user: Bytes!
  gauge: Gauge!
  originalBalance: BigInt!
  originalSupply: BigInt!
  workingBalance: BigInt!
  workingSupply: BigInt!
  timestamp: BigInt!
  block: BigInt!
  tx: Bytes!
}

type GaugeDeposit @entity {
  id: ID!
  gauge: Gauge!
  provider: Bytes!
  value: BigInt!
}

type GaugeWithdraw @entity {
  id: ID!
  gauge: Gauge!
  provider: Bytes!
  value: BigInt!
}

type Gauge @entity {
  id: ID!
  address: Bytes!
  type: GaugeType!
  platform: Platform!
  pool: Pool!
  created: BigInt!
  block: BigInt!
  tx: Bytes!

  weights: [GaugeWeight!] @derivedFrom(field: "gauge")
  emissions: [Emission!] @derivedFrom(field: "gauge")
}

type Pool @entity {
  id: ID!
  lpToken: Bytes!
  address: Bytes!
  name: String!
  platform: Platform!
  gauges: [Gauge!] @derivedFrom(field: "pool")
  emissions: [Emission!] @derivedFrom(field: "pool")
}

type SnapshotTime @entity {
  id: ID!
  platform: Platform!
}

type GaugeWeight @entity {
  id: ID!
  gauge: Gauge!
  timestamp: BigInt!
  block: BigInt!
  weight: BigDecimal!
}

type Emission @entity {
  id: ID!
  gauge: Gauge!
  pool: Pool!
  timestamp: BigInt!
  block: BigInt!
  crvAmount: BigDecimal!
  value: BigDecimal!
}

type GaugeType @entity {
  id: ID!
  name: String!
  weight: BigDecimal!
  gaugeCount: BigInt!
  gauges: [Gauge!] @derivedFrom(field: "type")
}

type GaugeTotalWeight @entity {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
  weight: BigDecimal!
}
